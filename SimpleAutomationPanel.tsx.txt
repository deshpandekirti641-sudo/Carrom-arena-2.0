'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';

interface SystemStatus {
  totalMatches: number;
  activeMatches: number;
  totalUsers: number;
  totalTransactions: number;
  systemHealth: string;
  uptime: number;
  version: string;
}

const SimpleAutomationPanel: React.FC = () => {
  const [status, setStatus] = useState<SystemStatus | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  const fetchSystemStatus = async (): Promise<void> => {
    try {
      setLoading(true);
      const response = await fetch('/api/automation/simple');
      const data = await response.json();
      
      if (data.success) {
        setStatus(data.data);
      }
    } catch (error) {
      console.error('Failed to fetch system status:', error);
    } finally {
      setLoading(false);
    }
  };

  const initializeDeveloper = async (): Promise<void> => {
    try {
      const response = await fetch('/api/automation/simple', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'initialize_developer' })
      });
      
      const data = await response.json();
      if (data.success) {
        console.log('Developer wallet initialized');
        fetchSystemStatus(); // Refresh status
      }
    } catch (error) {
      console.error('Failed to initialize developer:', error);
    }
  };

  useEffect(() => {
    fetchSystemStatus();
    
    // Auto-refresh every 30 seconds
    const interval = setInterval(fetchSystemStatus, 30000);
    
    return () => clearInterval(interval);
  }, []);

  if (loading && !status) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>System Status</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-4">Loading system status...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Automation System Status</CardTitle>
          <Badge variant={status?.systemHealth === 'operational' ? 'default' : 'destructive'}>
            {status?.systemHealth || 'Unknown'}
          </Badge>
        </CardHeader>
        <CardContent className="space-y-4">
          {status && (
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{status.totalMatches}</div>
                <div className="text-sm text-muted-foreground">Total Matches</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{status.activeMatches}</div>
                <div className="text-sm text-muted-foreground">Active Matches</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{status.totalUsers}</div>
                <div className="text-sm text-muted-foreground">Total Users</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">{status.totalTransactions}</div>
                <div className="text-sm text-muted-foreground">Transactions</div>
              </div>
            </div>
          )}
          
          <Separator />
          
          <div className="flex flex-col sm:flex-row gap-4">
            <Button 
              onClick={fetchSystemStatus}
              disabled={loading}
              variant="outline"
            >
              {loading ? 'Refreshing...' : 'Refresh Status'}
            </Button>
            
            <Button 
              onClick={initializeDeveloper}
              variant="default"
            >
              Initialize Developer Wallet
            </Button>
          </div>
          
          {status && (
            <div className="text-xs text-muted-foreground space-y-1">
              <div>Version: {status.version}</div>
              <div>System uptime: {Math.floor(Date.now() / 1000)} seconds</div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Automated Features</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>✅ Real-time OTP verification</span>
              <Badge variant="outline">Active</Badge>
            </div>
            <div className="flex justify-between">
              <span>✅ Automatic match creation</span>
              <Badge variant="outline">Active</Badge>
            </div>
            <div className="flex justify-between">
              <span>✅ Prize pool distribution</span>
              <Badge variant="outline">Active</Badge>
            </div>
            <div className="flex justify-between">
              <span>✅ Wallet transaction processing</span>
              <Badge variant="outline">Active</Badge>
            </div>
            <div className="flex justify-between">
              <span>✅ Server fee collection</span>
              <Badge variant="outline">Active</Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SimpleAutomationPanel;